function mod_spec_mvpa(subpar,S,names,onsets,durations,R)
% function ar_mod_spec(subpar)
% Set up the design matrix and run a design.
%
% subpar refers to either the subject number (in string notation) or
% the par struct generated by par = par_params(subject)
%
% jbh 7/24/08
%
% create subdirectory and choose correct onsets based on model selection.
% j.chen 05/03/09
%
% specifies single-trial model using names/onsets/durs from
% ar_MakeBetaMaps_spm; saves SPM.mat to trialBetas directory
% vc 12/06/12


origdir = pwd;
% ---load par params if need be---
if isstruct(subpar) % if par_params is a struct
    par = subpar;
else % assume subject string
    par = sub_params_mvpa(subpar);
end


spm_defaults;
global defaults
defaults.modality='FMRI';

cd(S.patRegDir);

%-Ask about overwriting files from previous analyses...
%-------------------------------------------------------------------
if exist(fullfile(S.patRegDir,'SPM.mat'),'file')
    %     str = {	'Current directory contains existing SPM file:',...
    %         'Continuing will overwrite existing file!'};
    %     if spm_input(str,1,'bd','stop|continue',[1,0],1,mfilename);
    %         fprintf('%-40s: %30s\n\n',...
    %             'Abort...   (existing SPM file)',spm('time'));
    %         return
    %     end
%     movefile('SPM.mat',['SPM.mat-' date]);
    movefile('SPM.mat','SPM_backup.mat');
end

% If we've gotten to this point we're committed to overwriting files.
% Delete them so we don't get stuck in spm_spm
%------------------------------------------------------------------------
files = {'^mask\..{3}$','^ResMS\..{3}$','^RPV\..{3}$',...
    '^beta_.{4}\..{3}$','^con_.{4}\..{3}$','^ResI_.{4}\..{3}$',...
    '^ess_.{4}\..{3}$', '^spm\w{1}_.{4}\..{3}$'};

for i=1:length(files)
    j = spm_select('List',pwd,files{i});
    for k=1:size(j,1)
        spm_unlink(deblank(j(k,:)));
    end
end

% Variables
%-------------------------------------------------------------
SPM.xY.RT = par.TR;
SPM.xY.P = [];

% Slice timing
defaults.stats.fmri.t=par.timing.fmri_t;
defaults.stats.fmri.t0=par.timing.fmri_t0;

% Basis function variables
%-------------------------------------------------------------
SPM.xBF.UNITS = par.timing.units;
SPM.xBF.dt    = par.TR/defaults.stats.fmri.t;
SPM.xBF.T     = defaults.stats.fmri.t;
SPM.xBF.T0    = defaults.stats.fmri.t0;

% Basis functions
%-------------------------------------------------------------
if strcmp(fieldnames(par.bases),'hrf')
    if all(par.bases.hrf.derivs == [0 0])
        SPM.xBF.name = 'hrf';
    elseif all(par.bases.hrf.derivs == [1 0])
        SPM.xBF.name = 'hrf (with time derivative)';
    elseif all(par.bases.hrf.derivs == [1 1])
        SPM.xBF.name = 'hrf (with time and dispersion derivatives)';
    else
        error('Unrecognized hrf derivative choices.')
    end
else
    error('non-HRF selected! Not supported by this batchmode!');
end

SPM.xBF          = spm_get_bf(SPM.xBF);

if isempty(par.sess),
    SPM.xBF.Volterra = false;
else
    SPM.xBF.Volterra = par.volt;
end;

for i = 1:numel(par.sess),
    sess = par.sess(i);
    
    % Image filenames
    %-------------------------------------------------------------
    SPM.nscan(i) = size(sess.scans,1);
    SPM.xY.P     = strvcat(SPM.xY.P,sess.scans);
    U = [];
    
    % Augment the singly-specified conditions with the multiple
    % conditions specified in a .mat file provided by the user
    %------------------------------------------------------------
    for j=1:length(onsets)
        cond.name     = names{j};
        cond.onset    = onsets{j};
        cond.duration = durations{j};
        cond.tmod = 0;
        cond.pmod = [];
        sess.cond(j) = cond;
    end
    
    % Configure the input structure array
    %-------------------------------------------------------------
    for j = 1:length(onsets),
        cond      = sess.cond(j);
        U(j).name = {cond.name};
        U(j).ons  = cond.onset(:);
        U(j).dur  = cond.duration(:);
        if length(U(j).dur) == 1
            U(j).dur    = U(j).dur*ones(size(U(j).ons));
        elseif length(U(j).dur) ~= length(U(j).ons)
            error('Mismatch between number of onset and number of durations.')
        end
        
        P  = [];
        q1 = 0;
        
        if cond.tmod>0,
            % time effects
            P(1).name = 'time';
            P(1).P    = U(j).ons*par.TR;
            P(1).h    = cond.tmod;
            q1        = 1;
        end;
        if ~isempty(cond.pmod)
            for q = 1:numel(cond.pmod),
                % Parametric effects
                q1 = q1 + 1;
                P(q1).name = cond.pmod(q).name;
                P(q1).P    = cond.pmod(q).param(:);
                P(q1).h    = cond.pmod(q).poly;
            end;
        end
        
        if isempty(P)
            P.name = 'none';
            P.h    = 0;
        end
        U(j).P = P;
        
    end
    
    SPM.Sess(i).U = U;
    
    %remove conditions with no onsets (code from alan)
    idxToRemove = [];
    for u=2:length(SPM.Sess.U);
        if isempty(SPM.Sess.U(u).ons)
            idxToRemove = [u idxToRemove];
        end
    end
    SPM.Sess.U(idxToRemove)=[];
    
    
    % User specified regressors  ASSUMING NONE!!!!
    %-------------------------------------------------------------
    C = [];
    Cname = {}; %cell(1,numel(sess.regress));
    
    % Augment the singly-specified regressors with the multiple regressors
    % specified in the regressors.mat file
    %------------------------------------------------------------
    C=[C, R];
    nr=size(R,2);
    nq=length(Cname);
    for inr=1:nr,
        Cname{inr+nq}=['R',int2str(inr)];
    end
    SPM.Sess(i).C.C    = C;
    SPM.Sess(i).C.name = Cname;
    
end

% Factorial design
%-------------------------------------------------------------
if isfield(par,'fact')
    if ~isempty(par.fact)
        NC=length(SPM.Sess(1).U); % Number of conditions
        CheckNC=1;
        for i=1:length(par.fact)
            SPM.factor(i).name=par.fact(i).name;
            SPM.factor(i).levels=par.fact(i).levels;
            CheckNC=CheckNC*SPM.factor(i).levels;
        end
        if ~(CheckNC==NC)
            disp('Error in fmri_spec job: factors do not match conditions');
            return
        end
    end
else
    SPM.factor=[];
end

% Globals
%-------------------------------------------------------------
SPM.xGX.iGXcalc = par.global;
SPM.xGX.sGXcalc = 'mean voxel value';
SPM.xGX.sGMsca  = 'session specific';

% High Pass filter
%-------------------------------------------------------------
for i = 1:numel(par.sess),
    SPM.xX.K(i).HParam = par.sess(i).hpf; % Inf - no hpf
end

% Autocorrelation
%-------------------------------------------------------------
SPM.xVi.form = par.cvi;

% Let SPM configure the design
%-------------------------------------------------------------
SPM = spm_fmri_spm_ui(SPM);

if ~isempty(par.mask)&&~isempty(par.mask{1})
    SPM.xM.VM         = spm_vol(par.mask{:});
    SPM.xM.xs.Masking = [SPM.xM.xs.Masking, '+explicit mask'];
end

% Our own High Pass filter
% nacq = size(par.sess.scans,1);
% Num_conds_int = length(SPM.Sess(1).U);
% SPM.xX.X(:,1:Num_conds_int) = ar_hpf(par.TR,nacq,SPM.xX.X(:,1:Num_conds_int));

%-Save SPM.mat
%-----------------------------------------------------------------------
fprintf('%-40s: ','Saving SPM configuration')   %-#
if spm_matlab_version_chk('7') >= 0 %only works if SPM subfolders are in path
    save('SPM','-V7','SPM');
else
    save('SPM','SPM');
end;

fprintf('%30s\n','...SPM.mat saved')                     %-#


cd(origdir); % Change back dir

%print out ps
%par_print(par);


fprintf('Done\n')
return
%-------------------------------------------------------------------------